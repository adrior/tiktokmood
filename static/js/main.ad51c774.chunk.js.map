{"version":3,"sources":["Blocks/PumButton/PumButton.js","App.js","serviceWorker.js","index.js"],"names":["PumButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","play","audioNode","current","stop","pause","currentTime","componentWillUpdate","nextProps","nextState","isPlaying","handlePlay","name","React","createRef","react_default","a","createElement","className","concat","onClick","ref","src","audio","children","Component","App","state","setState","defineProperty","prev","sounds","forEach","el","_this2","map","sound","Blocks_PumButton_PumButton","key","toUpperCase","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPA8CeA,2BA1Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKRQ,KAAO,WACLP,EAAKQ,UAAUC,QAAQF,QAPNP,EAUnBU,KAAO,WACLV,EAAKQ,UAAUC,QAAQE,QACvBX,EAAKQ,UAAUC,QAAQG,YAAc,GAZpBZ,EAenBa,oBAAsB,SAACC,EAAWC,GAC5BD,EAAUE,UACPhB,EAAKD,MAAMiB,WAAWhB,EAAKO,OAE5BP,EAAKD,MAAMiB,WAAWhB,EAAKU,QAnBhBV,EAuBnBiB,WAAa,WACXjB,EAAKD,MAAMkB,WAAWjB,EAAKD,MAAMmB,OArBjClB,EAAKQ,UAAYW,IAAMC,YAHNpB,wEA4BjB,OACEqB,EAAAC,EAAAC,cAAA,OACEC,UAAS,uBAAAC,OACPtB,KAAKJ,MAAMiB,UAAY,UAAY,IAErCU,QAASvB,KAAKc,YAEdI,EAAAC,EAAAC,cAAA,SAAOI,IAAKxB,KAAKK,UAAWoB,IAAKzB,KAAKJ,MAAM8B,QAC3C1B,KAAKJ,MAAM+B,iBArCIC,cCwDTC,cAtDb,SAAAA,EAAYjC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,IACjBhC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+B,GAAA1B,KAAAH,KAAMJ,KAmBRkB,WAAa,SAAAC,GACPlB,EAAKiC,MAAMf,GAAMF,UACnBhB,EAAKkC,SAALjC,OAAAkC,EAAA,EAAAlC,CAAA,GAAiBiB,EAAO,CAAEF,WAAW,MAErChB,EAAKkC,SAALjC,OAAAkC,EAAA,EAAAlC,CAAA,GAAiBiB,EAAO,CAAEF,WAAW,KACjChB,EAAKoC,MAAQlB,IAASlB,EAAKoC,MAC7BpC,EAAKkC,SAALjC,OAAAkC,EAAA,EAAAlC,CAAA,GAAiBD,EAAKoC,KAAO,CAAEpB,WAAW,KAC1ChB,EAAKoC,KAAOlB,GAEZlB,EAAKoC,KAAOlB,IA1BhBlB,EAAKqC,OAAS,CACZ,UACA,eACA,WACA,MACA,SACA,MACA,SACA,aAEFrC,EAAKiC,MAAQ,GACbjC,EAAKqC,OAAOC,QAAQ,SAAAC,GAClBvC,EAAKoC,KAAO,KACZpC,EAAKiC,MAAMM,GAAM,CAAEvB,WAAW,KAhBfhB,wEAkCV,IAAAwC,EAAArC,KACP,OACEkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACdrB,KAAKkC,OAAOI,IAAI,SAAAC,GAAK,OACpBrB,EAAAC,EAAAC,cAACoB,EAAD,CACEC,IAAKF,EACLb,MAAK,UAAAJ,OAAYiB,EAAZ,QACLzB,WAAYuB,EAAKvB,WACjBC,KAAMwB,EACN1B,UAAWwB,EAAKP,MAAMS,GAAO1B,WAE5B0B,EAAMG,yBA/CDd,aCQEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ad51c774.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./PumButton.scss\";\n\nclass PumButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.audioNode = React.createRef();\n  }\n\n  play = () => {\n    this.audioNode.current.play();\n  };\n\n  stop = () => {\n    this.audioNode.current.pause();\n    this.audioNode.current.currentTime = 0;\n  };\n\n  componentWillUpdate = (nextProps, nextState) => {\n    if (nextProps.isPlaying) {\n      if (!this.props.isPlaying) this.play();\n    } else {\n      if (this.props.isPlaying) this.stop();\n    }\n  };\n\n  handlePlay = () => {\n    this.props.handlePlay(this.props.name);\n  };\n\n  render() {\n    return (\n      <div\n        className={`PumButton PumButton_${\n          this.props.isPlaying ? \"playing\" : \"\"\n        }`}\n        onClick={this.handlePlay}\n      >\n        <audio ref={this.audioNode} src={this.props.audio} />\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default PumButton;\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport PumButton from \"./Blocks/PumButton/PumButton.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sounds = [\n      \"wannabe\",\n      \"boomboomgirs\",\n      \"crandles\",\n      \"fly\",\n      \"letsgo\",\n      \"mix\",\n      \"memory\",\n      \"fbiopenup\"\n    ];\n    this.state = {};\n    this.sounds.forEach(el => {\n      this.prev = null;\n      this.state[el] = { isPlaying: false };\n    });\n  }\n\n  handlePlay = name => {\n    if (this.state[name].isPlaying) {\n      this.setState({ [name]: { isPlaying: false } });\n    } else {\n      this.setState({ [name]: { isPlaying: true } });\n      if (this.prev && name !== this.prev) {\n        this.setState({ [this.prev]: { isPlaying: false } });\n        this.prev = name;\n      } else {\n        this.prev = name;\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App__logo\" />\n        {this.sounds.map(sound => (\n          <PumButton\n            key={sound}\n            audio={`sounds/${sound}.mp3`}\n            handlePlay={this.handlePlay}\n            name={sound}\n            isPlaying={this.state[sound].isPlaying}\n          >\n            {sound.toUpperCase()}\n          </PumButton>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}